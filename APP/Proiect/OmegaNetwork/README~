
Compilare:
	> make build

Rulare un tip de paralelism:
	> make run_<tip> [P=<nr_proc>]
		<tip>: [serial, openmp, pthreads, mpi]
		Ex: > make run_openmp P=8
			> make run_mpi

Rulare toate tipurile de paralelism cu numar de procesoare 'nr_de_procesoare_dorit':
	> make run_all P=nr_de_procesoare_dorit

Rulare toate tipurile de paralelism pe 1, 2, 4, 8 si 16 procesoare:
	> make run_all_tests

Curatare:
	> make clean

* Implementare:
	- limbaj de programare: C
	- input: fisier sau linie de comanda:
		- N: numar de pini I/O per pereche
		- n: numar de perechi de I/O
		- cate `n` perechi de cate 2xN valori de input si output
			- exemplu: fisierul `input` din directorul curent
	- output: tipul de blocuri pentru fiecare retea Omega
	- arhitectura program:
		- se ia fiecare pereche de I/O pe rand
		- se genereaza toate designurile posibile de Omega Network
		- pentru fiecare posibilitate, se ruleaza pe intrari si se verifica daca s-a ajuns la valorile de output dorite
	- tipuri de paralelizari implementate:
		- serial
		- OpenMp
		- PThreads
		- MPI
		- Hybrid - MPI & OpenMP
			- pentru fiecare tip de paralelizare, se imparte in mod egal numarul de posibilitati de design fiecarui
			procespr, pentru a fi testata fiecare posibilitate in parte.
			- varianta hibrida ruleaza cel mai bine cand fiecare `nod` ruleaza pe o masina diferita - in fiecare `nod`,
			cu OpenMP se mai genereaza fire aditionale de executie, care impart si mai mult posibilitatile.


* Timpi de rulare per metoda de paralelizare si numar de procesoare:
						P = 1	    P = 2	    P = 4	    P = 8
Serial	                16.01	    16.01	    16.01	    16.01
OpenMP	                16.48	    5.11	    2.2	        0.93
PThreads	            16.68	    5.16	    2.42	    1.21
MPI	                    16.31	    11.26	    6.69	    5.78
Hybrid - MPI & OpenMP	5.55	    7.31	    6.53	    5.84